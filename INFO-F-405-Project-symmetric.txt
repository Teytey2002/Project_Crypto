# Test vectors for the implementation of the ABCD permutation

We start with an arbitrary value for (a, b, c, d):
(a = 0x0123456789ABCDEF, b = 0x2222222222222222, c = 0x1231231231231231, d = 0xABCDABCDABCDABCD)
After we apply ShakeColumns() to it:
(a = 0x9BDEAAFDB8CC9BDE, b = 0xB8DFCDB813457413, c = 0x88CCCC8800444400, d = 0x313044579AAAFDFC)
After we apply PreShiftRows() to it:
(a = 0x9BDEAAFDB8CC9BDE, b = 0xDC6FE6DC09A2BA09, c = 0x1119999100088880, d = 0xFE1898222BCD557E)
After we apply StirColumns() to it:
(a = 0x8BD72A6DB8CC13DE, b = 0xCC777EDC09AABA09, c = 0x9B0991B128C499DE, d = 0x764FB26E23454776)
After we apply PostShiftRows() to it:
(a = 0x8BD72A6DB8CC13DE, b = 0xE63BBF6E04D55D04, c = 0xF4D84C8D894624CE, d = 0xA2A3BB3B27D93711)
After we apply AddRoundConstant(0) to it:
(a = 0x8BD72A6DB8CC13DF, b = 0xE63BBF6E04D55D04, c = 0xF4D84C8D894624CE, d = 0xA2A3BB3B27D93711)
After we do the round with r = 1:
(a = 0xF8802C1DA9624ED8, b = 0xB30F7754C418C798, c = 0x428B4F6E5C93D00D, d = 0x9D50D235665B32A7)
After we do the round with r = 2:
(a = 0x7E5D3A2CFF94330D, b = 0xD896AC54A46AB10A, c = 0xA6E6FF993C97A03B, d = 0x866B564B44CD112D)
After we do remaining rounds up to r = 12:
(a = 0xD37A89D1C3A3E735, b = 0x251A9862A84DC3B2, c = 0x1DA658AAA1173E00, d = 0xFD4E5B0709C1956F)

So, if the input of the permutation is:
(a = 0x0123456789ABCDEF, b = 0x2222222222222222, c = 0x1231231231231231, d = 0xABCDABCDABCDABCD)
The, the output of the permutation is:
(a = 0xD37A89D1C3A3E735, b = 0x251A9862A84DC3B2, c = 0x1DA658AAA1173E00, d = 0xFD4E5B0709C1956F)

As another example, we evaluate the permutation on the all-zero input value. We display the intermediate values round after round.
(a = 0x0000000000000000, b = 0x0000000000000000, c = 0x0000000000000000, d = 0x0000000000000000)
After round 0:
(a = 0x0000000000000001, b = 0x0000000000000000, c = 0x0000000000000000, d = 0x0000000000000000)
After round 1:
(a = 0x0000000000000003, b = 0x4000000000000000, c = 0x0100000000000000, d = 0x0000000040000000)
After round 2:
(a = 0x4100000040000007, b = 0xC040000010000000, c = 0x0348000000400000, d = 0x00000000D0400000)
After round 3:
(a = 0x63280000C000000F, b = 0xD092000024040001, c = 0x0799400000804000, d = 0x1410001170820020)
After round 4:
(a = 0x534B40114406403B, b = 0xDE0050046C08B00B, c = 0x2EBDFA0011949401, d = 0x3901120BAD08D020)
After round 5:
(a = 0xCBB5F80E8094F415, b = 0x997D4A263E66E307, c = 0x00F0C5C23E81A001, d = 0x0C049C0D30B5BC85)
After round 6:
(a = 0x76099329B1128BBC, b = 0x3514EA703B08228D, c = 0x8F5E84AF680647E5, d = 0xA81C6CF5D0460DE2)
After round 7:
(a = 0x3A76229B034168ED, b = 0xE062CE8687F43267, c = 0x42B830117C4054E4, d = 0x18B73AB51110FBFC)
After round 8:
(a = 0x2A79D437F8A43CAA, b = 0x503C632DDA9E69FE, c = 0x5FD0E17798948461, d = 0x2C35E98B9A493EDB)
After round 9:
(a = 0x0B176191ED4F91BB, b = 0x53263273E5984334, c = 0x8F06E25A989A1BF9, d = 0xEEEA944C4B55157F)
After round 10:
(a = 0x26934CA4BE1702D3, b = 0x539B4989AB8027BD, c = 0xD1A6C383AAA382E6, d = 0x2411E64EBCCDEC65)
After round 11:
(a = 0xCE2E5860E9C656E1, b = 0x94C8106A409BD714, c = 0x9D710B6061A36A09, d = 0x2CC92DE6292B91EB)
After round 12:
(a = 0xABB11ADD18157108, b = 0x38C57BE960518A40, c = 0xB3272731E4005563, d = 0xB2BDFAEFF1ECB8DA)
The image of the all-zero value through the ABCD permutation is therefore:
(a = 0xABB11ADD18157108, b = 0x38C57BE960518A40, c = 0xB3272731E4005563, d = 0xB2BDFAEFF1ECB8DA)


# Test vectors for the ABCD sponge function

## Input is the empty string
We here evaluate ABCDsponge(''):
Input: 
Padded input: 01 00 00 00 00 00 00 80
Absorbed block: 8000000000000001
State: (a = 0x0000000000000000, b = 0x0000000000000000, c = 0x0000000000000000, d = 0x0000000000000000)
Squeezed block: B37EC29B67CF3B45
State: (a = 0x00A27E2E518584CF, b = 0x2AE63759D4D4A165, c = 0x17000189601F8AE4, d = 0x25A4F7DE9671E580)
Squeezed block: 00A27E2E518584CF
State: (a = 0xF44E4CB3CCEBF9E4, b = 0x7F45FB663DE6EA8F, c = 0x708ADF0C4D0ADE87, d = 0x8BAD056BE1558B5D)
Squeezed block: F44E4CB3CCEBF9E4
State: (a = 0x86A3720CD7A92050, b = 0xE2116C7AAB8E3121, c = 0xEB7039D921FFDAD8, d = 0x3221F132C0A90281)
Output: 45 3b cf 67 9b c2 7e b3 cf 84 85 51 2e 7e a2 00 e4 f9 eb cc b3 4c 4e f4
bytearray(b'E;\xcfg\x9b\xc2~\xb3\xcf\x84\x85Q.~\xa2\x00\xe4\xf9\xeb\xcc\xb3LN\xf4')

## Input is a 3-byte string
We here evaluate ABCDsponge('ABC' or 0x41 0x42 0x43):
Input: 41 42 43
Padded input: 41 42 43 01 00 00 00 80
Absorbed block: 8000000001434241
State: (a = 0x0000000000000000, b = 0x0000000000000000, c = 0x0000000000000000, d = 0x0000000000000000)
Squeezed block: 45E11775B9A8DFC9
State: (a = 0x5131E0CFBCEC51AD, b = 0xC606D0D439D976A6, c = 0x6F3E212FBB2E2775, d = 0xE7F3B32EA97CF507)
Squeezed block: 5131E0CFBCEC51AD
State: (a = 0x8C6619646FC24BFE, b = 0x7FA203C8C42DF190, c = 0x8E18843ED20F2F6A, d = 0x9D4B823AD789CBCA)
Squeezed block: 8C6619646FC24BFE
State: (a = 0x2FDE209F483971DA, b = 0xE5940A6F05C8B277, c = 0x84271AEAE599A2B7, d = 0xF6F330BD283733BA)
Output: c9 df a8 b9 75 17 e1 45 ad 51 ec bc cf e0 31 51 fe 4b c2 6f 64 19 66 8c
bytearray(b'\xc9\xdf\xa8\xb9u\x17\xe1E\xadQ\xec\xbc\xcf\xe01Q\xfeK\xc2od\x19f\x8c')

## Input is a 8-byte string
We here evaluate ABCDsponge('01234567' or 0x30 0x31 0x32 0x33 0x34 0x35 0x36 0x37):
Input: 30 31 32 33 34 35 36 37
Padded input: 30 31 32 33 34 35 36 37 01 00 00 00 00 00 00 80
Absorbed block: 3736353433323130
State: (a = 0x0000000000000000, b = 0x0000000000000000, c = 0x0000000000000000, d = 0x0000000000000000)
Absorbed block: 8000000000000001
State: (a = 0x0749CCE7D24B67D9, b = 0xF8FC9A2012F1AE3D, c = 0x9B1EF0D4F87B69DF, d = 0xC19CC4246A5BB55D)
Squeezed block: 33CB5F535A2F6537
State: (a = 0x1142884280BCE37D, b = 0x11DCAB38578F9EE5, c = 0x281EAF474E98D952, d = 0xBCD561C75E7067CD)
Squeezed block: 1142884280BCE37D
State: (a = 0x3FCB7BD8382C4381, b = 0xDD1FBA1B72640770, c = 0x9BCDB787686C654F, d = 0x954990ED42FB3B99)
Squeezed block: 3FCB7BD8382C4381
State: (a = 0x8B906B0100BEAB7A, b = 0x034541A7E0D247D4, c = 0x976D497AACF9E755, d = 0xCADC6B00DDDCCEF8)
Output: 37 65 2f 5a 53 5f cb 33 7d e3 bc 80 42 88 42 11 81 43 2c 38 d8 7b cb 3f
bytearray(b'7e/ZS_\xcb3}\xe3\xbc\x80B\x88B\x11\x81C,8\xd8{\xcb?')

## Input is a 10-byte string
We here evaluate ABCDsponge('0123456789' or 0x30 0x31 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39):
Input: 30 31 32 33 34 35 36 37 38 39
Padded input: 30 31 32 33 34 35 36 37 38 39 01 00 00 00 00 80
Absorbed block: 3736353433323130
State: (a = 0x0000000000000000, b = 0x0000000000000000, c = 0x0000000000000000, d = 0x0000000000000000)
Absorbed block: 8000000000013938
State: (a = 0x0749CCE7D24B67D9, b = 0xF8FC9A2012F1AE3D, c = 0x9B1EF0D4F87B69DF, d = 0xC19CC4246A5BB55D)
Squeezed block: 21B68DB7EC02A781
State: (a = 0x80FDD1E97A3126C0, b = 0x919FCC9D95DC30B4, c = 0xE2D4AE7B024C70E9, d = 0x18DED773BC939BDE)
Squeezed block: 80FDD1E97A3126C0
State: (a = 0xB36481CDC7D028F9, b = 0xFB5BD52DDC4841F6, c = 0x65FBF3CD7358A614, d = 0x9FF8135B1DB25841)
Squeezed block: B36481CDC7D028F9
State: (a = 0x29B5379A2BAF1F38, b = 0xCC9AF6B9D960A5BA, c = 0x6D7B1D8F2B0B3AF2, d = 0xEAE04CB2ABD06E02)
Output: 81 a7 02 ec b7 8d b6 21 c0 26 31 7a e9 d1 fd 80 f9 28 d0 c7 cd 81 64 b3
bytearray(b'\x81\xa7\x02\xec\xb7\x8d\xb6!\xc0&1z\xe9\xd1\xfd\x80\xf9(\xd0\xc7\xcd\x81d\xb3')


# Test vectors for ABCDMAC

Computing ABCDMAC('ABCDEFGHIJKLMNOP', 'This message is authentic')
Input: 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50 54 68 69 73 20 6d 65 73 73 61 67 65 20 69 73 20 61 75 74 68 65 6e 74 69 63
Padded input: 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50 54 68 69 73 20 6d 65 73 73 61 67 65 20 69 73 20 61 75 74 68 65 6e 74 69 63 01 00 00 00 00 00 80
Absorbed block: 4847464544434241
State: (a = 0x0000000000000000, b = 0x0000000000000000, c = 0x0000000000000000, d = 0x0000000000000000)
Absorbed block: 504F4E4D4C4B4A49
State: (a = 0x3163C6976141C593, b = 0x122C36E599DC6E64, c = 0x4EE529DB1F1E053F, d = 0x0F372EBB8F393DDE)
Absorbed block: 73656D2073696854
State: (a = 0xCB61023DD5135A06, b = 0x2995348373F1B69B, c = 0xAD546EB4F9D2FF93, d = 0x386E6C904771D319)
Absorbed block: 2073692065676173
State: (a = 0xA2608CD683B63ECD, b = 0x661052416746DD5D, c = 0x893AA90CDC5DC54D, d = 0x08CCC438A550DF73)
Absorbed block: 69746E6568747561
State: (a = 0x7BC16490F0A0EF6B, b = 0x1F18E70C8F60A8B9, c = 0x206647EC1781D579, d = 0xD84CFCFC585AC008)
Absorbed block: 8000000000000163
State: (a = 0x7F2C64B8310D058D, b = 0x5C7497B35A101204, c = 0x154CF7453AEF3A83, d = 0xE82E9939E170FE9A)
Squeezed block: B98A197E4E370DCC
State: (a = 0xCB2AA6930AF6508E, b = 0xC8CAF1B597865217, c = 0xE94F0B835EF5DADE, d = 0x316E011ECAEBD285)
Squeezed block: CB2AA6930AF6508E
State: (a = 0x4C49D3539669B988, b = 0xAF4709954526EC55, c = 0x315E2928AF08047A, d = 0x3877CE0FD444A5DD)
Output: cc 0d 37 4e 7e 19 8a b9 8e 50 f6 0a 93 a6 2a cb
The MAC is cc 0d 37 4e 7e 19 8a b9 8e 50 f6 0a 93 a6 2a cb

Computing ABCDMAC('ABCDEFGHIJKLMNOP', 'This message has changed')
Input: 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50 54 68 69 73 20 6d 61 73 73 61 67 65 20 68 61 73 20 63 68 61 6e 67 65 64
Padded input: 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50 54 68 69 73 20 6d 61 73 73 61 67 65 20 68 61 73 20 63 68 61 6e 67 65 64 01 00 00 00 00 00 00 80
Absorbed block: 4847464544434241
State: (a = 0x0000000000000000, b = 0x0000000000000000, c = 0x0000000000000000, d = 0x0000000000000000)
Absorbed block: 504F4E4D4C4B4A49
State: (a = 0x3163C6976141C593, b = 0x122C36E599DC6E64, c = 0x4EE529DB1F1E053F, d = 0x0F372EBB8F393DDE)
Absorbed block: 73616D2073696854
State: (a = 0xCB61023DD5135A06, b = 0x2995348373F1B69B, c = 0xAD546EB4F9D2FF93, d = 0x386E6C904771D319)
Absorbed block: 7361682065676173
State: (a = 0xF9CA2F09C4C4E002, b = 0x2751458AA68FEDDD, c = 0x92EFC4A631A37EBA, d = 0xF8FFE9381642B860)
Absorbed block: 6465676E61686320
State: (a = 0x2C42683A9100F037, b = 0x9BB24FA40116FDF9, c = 0x7BCB7058F8B60E7B, d = 0xFFD3350A62C0DC30)
Absorbed block: 8000000000000001
State: (a = 0x3011868548AC8A88, b = 0xEA5F3936B599EFD0, c = 0x8F9AF64F9AD6A7CF, d = 0x778D5F80609197D6)
Squeezed block: 8ADA63847EF82CAA
State: (a = 0xD580214EED35DC61, b = 0xCA391863D12184E5, c = 0xF7CF3DC58C9F8629, d = 0xF1AAEA1A2824B272)
Squeezed block: D580214EED35DC61
State: (a = 0x3B492A4467F2EFA2, b = 0xE0B0A2911867803F, c = 0x7826C08D24C9D0ED, d = 0x80305B3CB9BEC0A9)
Output: aa 2c f8 7e 84 63 da 8a 61 dc 35 ed 4e 21 80 d5
The MAC is aa 2c f8 7e 84 63 da 8a 61 dc 35 ed 4e 21 80 d5


# Test vectors for ABCD encryption

Encrypting 'My secret message' with key 'ABCDEFGHIJKLMNOP' and diversifier 0
Key: 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50
Diversifier: 00 00 00 00 00 00 00 00
Plaintext: 4d 79 20 73 65 63 72 65 74 20 6d 65 73 73 61 67 65
Keystream: 91 bf cb 3a 9c 51 1d 02 1d be d4 a7 4d b2 56 d3 81
Ciphertext: dc c6 eb 49 f9 32 6f 67 69 9e b9 c2 3e c1 37 b4 e4
bytearray(b'\xdc\xc6\xebI\xf92ogi\x9e\xb9\xc2>\xc17\xb4\xe4')

Decrypting the ciphertext the with the same key and same diversifier
Key: 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50
Diversifier: 00 00 00 00 00 00 00 00
Ciphertext: dc c6 eb 49 f9 32 6f 67 69 9e b9 c2 3e c1 37 b4 e4
Keystream: 91 bf cb 3a 9c 51 1d 02 1d be d4 a7 4d b2 56 d3 81
Plaintext: 4d 79 20 73 65 63 72 65 74 20 6d 65 73 73 61 67 65
bytearray(b'My secret message')

Encrypting 'My secret message' with key 'ABCDEFGHIJKLMNOP' and diversifier 1
Key: 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f 50
Diversifier: 01 00 00 00 00 00 00 00
Plaintext: 4d 79 20 73 65 63 72 65 74 20 6d 65 73 73 61 67 65
Keystream: 29 62 90 7c 68 34 db 61 e5 12 f0 b6 d6 33 d9 fd 9d
Ciphertext: 64 1b b0 0f 0d 57 a9 04 91 32 9d d3 a5 40 b8 9a f8
bytearray(b'd\x1b\xb0\x0f\rW\xa9\x04\x912\x9d\xd3\xa5@\xb8\x9a\xf8')

